@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
     var user = await UserManager.GetUserAsync(User);

}

@if (SignInManager.IsSignedIn(User) & User.IsInRole("Employee"))
{
    
    <form asp-area="" asp-controller="Account" asp-action="Logout" id="logoutForm"
          method="post" class="navbar-right">
        <ul class="nav navbar-nav navbar-right">
            <li><a asp-action="EditUser" asp-controller="Account" asp-route-id="@user.Id">@user.UserName</a></li>
            <li><a asp-controller="Crud" asp-action="Index">CRUD</a></li>
            <li><a href="javascript:document.getElementById('logoutForm').submit()">Log out </a></li>
        </ul>
    </form>
}
else if (SignInManager.IsSignedIn(User))
{
    <form asp-area="" asp-controller="Account" asp-action="Logout" id="logoutForm"
          method="post" class="navbar-right">
        <ul class="nav navbar-nav navbar-right">
            <li><a asp-action="EditUser" asp-controller="Account" asp-route-id="@user.Id">@user.UserName</a></li>
            <li><a href="javascript:document.getElementById('logoutForm').submit()">Log out @user.UserName</a></li>
        </ul>
    </form>
}
else
{
    <ul class="nav navbar-nav navbar-right">
    <li><a id="registerLink" asp-controller="Account" asp-action="Register">Register</a></li>
    <li><a id="loginLink" asp-controller="Account" asp-action="Login">Log in</a></li>
    </ul>
}

